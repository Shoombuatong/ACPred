########################## SVM -5CV
internal = data.frame(AAC,Class = label)


for (i in 1: iter){
M = train(Class ~ ., data = internal, 
                             method = "gaussprRadial",
                             trControl = trainControl(method = "cv", number = 5),
                             preProc = c("center", "scale"))
predclass = M$ finalModel @ fitted
predprob = prediction(predict(M, internal, type = "prob")[,2],internal$Class)
perf_AUC = performance(predprob,"auc") #Calculate the AUC value
AUCtr = perf_AUC@y.values[[1]]
data1 = data.frame(predclass,label)
data = table(data1[,1], data1[,2])
	ACCtr = (data[1]+data[4])/(data[1]+data[2]+data[3]+data[4])*100
	SENStr  =  (data[1]/(data[1]+data[2]))*100
	SPECtr= (data[4])/(data[3]+data[4])*100
	MCC1      = (data[1]*data[4]) - (data[3]*data[2])
	MCC2      =  (data[4]+data[2])*(data[4]+data[3])
	MCC3      =  (data[1]+data[2])*(data[1]+data[3])
	MCC4	=  sqrt(MCC2)*sqrt(MCC3)
	MCCtr  = MCC1/MCC4
}

round(data.frame (ACCtr,SPECtr,SENStr,MCCtr,AUCtr),3)

########################## RF -5CV
tunegrid <- expand.grid(.mtry=c(1:10), .ntree=seq(100,500,100))
RFmodel <- train(Class~., data=internal , method=customRF, metric=c("Accuracy"), tuneGrid=tunegrid, trControl= trainControl(method = "cv", number = 5))
Resultcv = RFmodel$ finalModel$ confusion [,1:2]
pred=prediction(RFmodel$ finalModel$ votes[,2],internal[,ncol(internal)])
perf_AUC=performance(pred,"auc") #Calculate the AUC value
AUCtr = perf_AUC@y.values[[1]]
ACCtr = (data[1]+data[4])/(data[1]+data[2]+data[3]+data[4])*100
	SENStr  =  (data[1]/(data[1]+data[2]))*100
	SPECtr= (data[4])/(data[3]+data[4])*100
	MCC1      = (data[1]*data[4]) - (data[3]*data[2])
	MCC2      =  (data[4]+data[2])*(data[4]+data[3])
	MCC3      =  (data[1]+data[2])*(data[1]+data[3])
	MCC4	=  sqrt(MCC2)*sqrt(MCC3)
	MCCtr  = MCC1/MCC4
}

round(data.frame (ACCtr,SPECtr,SENStr,MCCtr,AUCtr),3)

